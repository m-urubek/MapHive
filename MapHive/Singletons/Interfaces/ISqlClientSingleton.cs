namespace MapHive.Singletons
{
    using System.Data;
    using System.Data.SQLite;

    public interface ISqlClientSingleton
    {

        /// <summary>
        /// Asynchronously executes an INSERT query and returns the autogenerated ID of the inserted row.
        /// </summary>
        /// <param name="query">The SQL query string to execute (INSERT).</param>
        /// <param name="parameters">An array of SQLite parameters to use in the query.</param>
        /// <returns>A task that represents the asynchronous operation. The task result contains the autogenerated ID.</returns>
        Task<int> InsertAsync(string query, SQLiteParameter[]? parameters = null);

        /// <summary>
        /// Asynchronously executes an UPDATE query and returns the number of rows affected.
        /// </summary>
        /// <param name="query">The SQL query string to execute (UPDATE).</param>
        /// <param name="parameters">An array of SQLite parameters to use in the query.</param>
        /// <returns>A task that represents the asynchronous operation. The task result contains the number of rows affected.</returns>
        Task<int> UpdateAsync(string query, SQLiteParameter[]? parameters = null);

        /// <summary>
        /// Asynchronously executes a SELECT query and returns the result as a DataTable.
        /// </summary>
        /// <param name="query">The SQL query string to execute (SELECT).</param>
        /// <param name="parameters">An array of SQLite parameters to use in the query.</param>
        /// <returns>A task that represents the asynchronous operation. The task result contains a DataTable with the query results.</returns>
        Task<DataTable> SelectAsync(string query, SQLiteParameter[]? parameters = null);

        /// <summary>
        /// Asynchronously executes a DELETE query and returns the number of rows affected.
        /// </summary>
        /// <param name="query">The SQL query string to execute (DELETE).</param>
        /// <param name="parameters">An array of SQLite parameters to use in the query.</param>
        /// <returns>A task that represents the asynchronous operation. The task result contains the number of rows affected.</returns>
        Task<int> DeleteAsync(string query, SQLiteParameter[]? parameters = null);

        /// <summary>
        /// Asynchronously executes an ALTER query or other schema-changing SQL statement and returns the number of rows affected.
        /// </summary>
        /// <param name="query">The SQL query string to execute (ALTER, CREATE, etc.).</param>
        /// <param name="parameters">An array of SQLite parameters to use in the query.</param>
        /// <returns>A task that represents the asynchronous operation. The task result contains the number of rows affected.</returns>
        Task<int> AlterAsync(string query, SQLiteParameter[]? parameters = null);

        /// <summary>
        /// Get the current number of operations in the queue.
        /// </summary>
        /// <returns>The number of operations currently queued</returns>
        int GetQueueSize();

        /// <summary>
        /// Asynchronously executes a custom query with the specified command behavior.
        /// </summary>
        /// <param name="query">The SQL query to execute.</param>
        /// <param name="parameters">Parameters for the query.</param>
        /// <param name="behavior">The command behavior to use.</param>
        /// <returns>A task that represents the asynchronous operation. The task result contains the query result as an object.</returns>
        Task<object> ExecuteCustomQueryAsync(string query, SQLiteParameter[]? parameters = null, CommandBehavior behavior = CommandBehavior.Default);

        /// <summary>
        /// Asynchronously executes a SQL script that may contain multiple SQL statements separated by semicolons.
        /// </summary>
        /// <param name="sqlScript">The SQL script to execute, which may contain multiple statements.</param>
        /// <returns>A task that represents the asynchronous operation. The task result contains the number of statements successfully executed.</returns>
        Task<int> ExecuteScriptAsync(string sqlScript);
    }
}
