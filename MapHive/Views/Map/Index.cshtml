@using MapHive.Models.Data.DbTableModels
@model IEnumerable<LocationExtended>

@{
    ViewData["Title"] = "Map View";
}

<div id="map"></div>

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" 
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" 
          crossorigin=""/>
    <link rel="stylesheet" href="~/css/map-dark.css" asp-append-version="true" />
    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
        }
        #map {
            position: fixed;
            top: 3.5rem; /* push below navbar (approx. 56px) */
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 0;
        }
        /* Ensure navbar and header are on top of the map */
        header, .navbar {
            position: relative;
            z-index: 1000;
        }
    </style>
}

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>
    <script>
        // Initialize the map
        var map = L.map('map').setView([40, 0], 2);
        map.attributionControl.setPosition('topright');
        var baseLayer = null;
        
        // Add tiles based on current theme (authenticated fetch or localStorage)
        const isAuthenticated = document.body.dataset.authenticated === 'true';
        const darkUrl = 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}@@2x.png';
        const lightUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
        const darkAttrib = '&copy; <a href="https://carto.com/attributions">CARTO</a> &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap contributors</a>';
        const lightAttrib = '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap contributors</a>';
        const loadTiles = function(enabled) {
            const url = enabled ? darkUrl : lightUrl;
            const attrib = enabled ? darkAttrib : lightAttrib;
            if (baseLayer) {
                map.removeLayer(baseLayer);
            }
            baseLayer = L.tileLayer(url, { maxZoom: 19, attribution: attrib });
            baseLayer.addTo(map);
        };
        if (isAuthenticated) {
            fetch('/Account/GetDarkModePreference', { credentials: 'same-origin' })
                .then(res => res.json())
                .then(data => loadTiles(data.enabled))
                .catch(() => loadTiles(false));
        } else {
            const themeDark = document.documentElement.classList.contains('dark-mode');
            loadTiles(themeDark);
        }
        
        // React to theme changes via custom event
        document.documentElement.addEventListener('themeChanged', function(e) {
            loadTiles(e.detail.dark);
        });
        
        // Add markers for each location
        var locations = @Html.Raw(Json.Serialize(Model));
        
        locations.forEach(function(location) {
            var marker = L.marker([location.latitude, location.longitude]).addTo(map);
            
            marker.bindPopup(
                '<strong><a href="/Map/Details/' + location.id + '">' + location.name + '</a></strong><br>' +
                (location.description ? location.description + '<br>' : '') +
                (location.address ? location.address + '<br>' : '') +
                (location.website ? '<a href="' + location.website + '" target="_blank">Website</a><br>' : '') +
                (location.phoneNumber ? 'Phone: ' + location.phoneNumber : '')
            );
        });
        
        // If we have locations, fit the map to show all markers
        if (locations.length > 0) {
            var group = new L.featureGroup(
                locations.map(function(location) {
                    return L.marker([location.latitude, location.longitude]);
                })
            );
            map.fitBounds(group.getBounds().pad(0.1));
        }
    </script>
} 