@model MapHive.Models.PageModels.LocationDisplayPageModel
@using System.Data
@using MapHive.Models.Data.DbTableModels
@using MapHive.Models.Exceptions
@using System.Linq

@{
    ViewData["Title"] = "Location Details";
}

<div class="container">
    <h2 class="my-4">@Model.Name</h2>

    <div class="row">
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h4>Location Information</h4>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-4">Name</dt>
                        <dd class="col-sm-8">@Model.Name</dd>

                        <dt class="col-sm-4">Description</dt>
                        <dd class="col-sm-8">@Model.Description</dd>

                        <dt class="col-sm-4">Category</dt>
                        <dd class="col-sm-8">@Model.CategoryName</dd>

                        <dt class="col-sm-4">Address</dt>
                        <dd class="col-sm-8">@(string.IsNullOrEmpty(Model.Address) ? "N/A" : Model.Address)</dd>

                        <dt class="col-sm-4">Coordinates</dt>
                        <dd class="col-sm-8">@Model.Latitude, @Model.Longitude</dd>

                        <dt class="col-sm-4">Website</dt>
                        <dd class="col-sm-8">
                            @if (string.IsNullOrEmpty(Model.Website))
                            {
                                <span>N/A</span>
                            }
                            else
                            {
                                <a href="@Model.Website" target="_blank">@Model.Website</a>
                            }
                        </dd>

                        <dt class="col-sm-4">Phone Number</dt>
                        <dd class="col-sm-8">@(string.IsNullOrEmpty(Model.PhoneNumber) ? "N/A" : Model.PhoneNumber)</dd>

                        <dt class="col-sm-4">Created</dt>
                        <dd class="col-sm-8">@Model.CreatedAt.ToString("yyyy-MM-dd HH:mm")</dd>

                        <dt class="col-sm-4">Last Updated</dt>
                        <dd class="col-sm-8">@Model.UpdatedAt.ToString("yyyy-MM-dd HH:mm")</dd>

                        <dt class="col-sm-4">Added By</dt>
                        <dd class="col-sm-8">
                            @if (Model.OwnerId is null)
                            {
                                <span>@Model.OwnerUsername</span>
                            }
                            else
                            {
                                <a asp-controller="Account" asp-action="PublicProfileById" asp-route-id="@(Model.OwnerId)" >@Model.OwnerUsername</a>
                            }
                        </dd>

                        <dt class="col-sm-4">Rating</dt>
                        <dd class="col-sm-8">
                            @if (Model.ReviewCount > 0)
                            {
                                <div class="d-flex align-items-center">
                                    <div class="rating-stars">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= Math.Round(Model.AverageRating ?? 0))
                                            {
                                                <i class="fas fa-star text-warning"></i>
                                            }
                                            else if (i - 0.5 <= (Model.AverageRating ?? 0))
                                            {
                                                <i class="fas fa-star-half-alt text-warning"></i>
                                            }
                                            else
                                            {
                                                <i class="far fa-star text-warning"></i>
                                            }
                                        }
                                    </div>
                                    <span class="ms-2">@((Model.AverageRating ?? throw new NoNullAllowedException(nameof(Model.AverageRating ))).ToString("0.0")) (@Model.ReviewCount @(Model.ReviewCount == 1 ? "review" : "reviews"))</span>
                                </div>
                            }
                            else
                            {
                                <span>No reviews yet</span>
                            }
                        </dd>
                    </dl>
                </div>
                <div class="card-footer">
                    @if (Model.CanEdit)
                    {
                        <a asp-action="Edit" asp-route-id="@(ViewContext.IdOrThrow())" class="btn btn-warning">Edit</a>
                        <a asp-action="Delete" asp-route-id="@(ViewContext.IdOrThrow())" class="btn btn-danger">Delete</a>
                    }
                    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h4>Map Location</h4>
                </div>
                <div class="card-body">
                    <div id="map" style="width: 100%; height: 400px;"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <ul class="nav nav-tabs" id="locationTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="reviews-tab" data-bs-toggle="tab" data-bs-target="#reviews" type="button" role="tab" aria-controls="reviews" aria-selected="true">
                        Reviews (@Model.ReviewCount)
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="discussions-tab" data-bs-toggle="tab" data-bs-target="#discussions" type="button" role="tab" aria-controls="discussions" aria-selected="false">
                        Discussions (@Model.RegularDiscussionCount)
                    </button>
                </li>
            </ul>

            <div class="tab-content p-3 border border-top-0 rounded-bottom" id="locationTabsContent">
                <div class="tab-pane fade show active" id="reviews" role="tabpanel" aria-labelledby="reviews-tab">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4>Reviews</h4>
                        @if (!Model.HasReviewed)
                        {
                            <a asp-controller="Review" asp-action="Create" asp-route-id="@(ViewContext.IdOrThrow())" class="btn btn-primary">
                                <i class="fas fa-star"></i> Write a Review
                            </a>
                        }
                    </div>

                    @if (Model.Reviews?.Any() ?? false)
                    {
                        @foreach (var review in Model.Reviews)
                        {
                            <div class="card mb-3">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <div>
                                        @if (review.AuthorId is null)
                                        {
                                            <span class="fw-bold">@review.AuthorUsername</span>
                                        }
                                        else
                                        {
                                            <span class="fw-bold">
                                                <a asp-controller="Account" asp-action="PublicProfileById" asp-route-id="@review.AuthorId" >@review.AuthorUsername</a>
                                            </span>
                                        }
                                        <span class="text-muted ms-2">@review.CreatedAt.ToString("yyyy-MM-dd HH:mm")</span>
                                    </div>
                                    <div class="rating-stars">
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= review.Rating)
                                            {
                                                <i class="fas fa-star text-warning"></i>
                                            }
                                            else
                                            {
                                                <i class="far fa-star text-warning"></i>
                                            }
                                        }
                                    </div>
                                </div>
                                <div class="card-body">
                                    <p class="card-text">@review.ReviewText</p>
                                </div>
                                <div class="card-footer d-flex justify-content-between">
                                    @{  
                                        var reviewThread = Model.Threads?.FirstOrDefault(t => t.ReviewId.HasValue && t.ReviewId == review.Id);
                                    }

                                    <div>
                                        @if (reviewThread != null)
                                        {
                                            <a asp-controller="Discussion" asp-action="Thread" asp-route-id="@reviewThread!.Id" class="btn btn-sm btn-outline-primary">
                                                <i class="fas fa-comments"></i> View Discussion (@reviewThread!.MessagesCount)
                                            </a>
                                        }
                                    </div>

                                    <div>
                                        @if (User.Identity?.IsAuthenticated == true &&
                                       (User.IsInRole("Admin") || User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value == review.AuthorId?.ToString()))
                                        {
                                            <a asp-controller="Review" asp-action="Edit" asp-route-id="@review.Id" class="btn btn-sm btn-outline-warning me-2">
                                                <i class="fas fa-edit"></i> Edit
                                            </a>
                                            <form asp-controller="Review" asp-action="Delete" asp-route-id="@review.Id" method="post" class="d-inline">
                                                <button type="submit" class="btn btn-sm btn-outline-danger" onclick="return confirm('Are you sure you want to delete this review?');">
                                                    <i class="fas fa-trash"></i> Delete
                                                </button>
                                            </form>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="alert alert-info">
                            No reviews yet. Be the first to review this location!
                        </div>
                    }
                </div>

                <div class="tab-pane fade" id="discussions" role="tabpanel" aria-labelledby="discussions-tab">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4>Discussions</h4>
                        @if (User.Identity?.IsAuthenticated == true)
                        {
                            <a asp-controller="Discussion" asp-action="Create" asp-route-id="@(ViewContext.IdOrThrow())" class="btn btn-primary">
                                <i class="fas fa-plus"></i> Start a Discussion
                            </a>
                        }
                    </div>

                    @if (Model.RegularDiscussionCount > 0)
                    {
                        ViewData["ReviewsMode"] = false;
                        <partial name="_ThreadListPartial" model="Model.Threads" />
                    }
                    else
                    {
                        <div class="alert alert-info">
                            No discussions yet. Start a new discussion!
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin="" />
    <link rel="stylesheet" href="~/css/map-dark.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
          integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
          crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        #map {
            border-radius: 5px;
            border: 1px solid #ccc;
        }

        .rating-stars {
            color: #ffc107;
        }
    </style>
}

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>
    <script>
        $(document).ready(function() {
            // Initialize the map with only zoom buttons enabled, all other interactions disabled
            var map = L.map('map', {
                dragging: false,
                zoomControl: true,
                scrollWheelZoom: false,
                doubleClickZoom: false,
                touchZoom: false,
                boxZoom: false,
                keyboard: false,
                tap: false
            }).setView([@Model.Latitude, @Model.Longitude], 13);

            // Add tiles based on current theme (authenticated fetch or localStorage)
            const isAuthenticated = document.body.dataset.authenticated === 'true';
            const darkUrl = 'https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}@@2x.png';
            const lightUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
            const darkAttrib = '&copy; <a href="https://carto.com/attributions">CARTO</a> &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap contributors</a>';
            const lightAttrib = '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap contributors</a>';
            const loadTiles = enabled => {
                const url = enabled ? darkUrl : lightUrl;
                const attrib = enabled ? darkAttrib : lightAttrib;
                L.tileLayer(url, { maxZoom: 19, attribution: attrib }).addTo(map);
            };
            if (isAuthenticated) {
                fetch('/Account/GetDarkModePreference', { credentials: 'same-origin' })
                    .then(res => res.json())
                    .then(data => loadTiles(data.enabled))
                    .catch(() => loadTiles(false));
            } else {
                const themeDark = document.documentElement.classList.contains('dark-mode');
                loadTiles(themeDark);
            }

            // React to theme changes via custom event
            document.documentElement.addEventListener('themeChanged', function(e) {
                loadTiles(e.detail.dark);
            });

            // Add a marker for the location
            var marker = L.marker([@Model.Latitude, @Model.Longitude]).addTo(map);
        });
    </script>
} 
