@using System.Text.Json
@using MapHive.Models.Data.DataGrid
@using MapHive.Models.Data.DbTableModels
@model MapHive.Models.PageModels.DataGridPageModel

<h2 class="mt-3 mb-3">@Model.Title</h2>
<hr />

@{
    // Set displayColumns
    List<DataGridColumn> displayColumns = Model.ColumnNames is not null && Model.ColumnNames.Count > 0
        ? Model.Columns.Where(c => Model.ColumnNames.Contains(c.InternalName)).ToList()
        : Model.Columns;
    int currentPage = 1;
    string? searchColumnName = null;
    string? searchTerm = null;
    string? sortColumnName = null;
    string? sortDirection = null;
    string tableName = ViewContext.GetRouteValueOrThrow<string>("tableName");
}

<link rel="stylesheet" href="https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css" />
<link rel="stylesheet" href="~/css/datagrid.css" asp-append-version="true" />

<div class="detailslist-container ms-Fabric" id="grid-@Model.GetHashCode()">
    <!-- Bootstrap spinner for loading indicator -->
    <div class="grid-spinner">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    <div class="ms-DetailsList">
        <div class="ms-DetailsHeader">
            <div class="ms-DetailsRow" style="font-weight: 600; height: auto;">
                @{
                    var displayIndex = 0;
                }
                @foreach (var column in displayColumns)
                {
                    <div class="ms-DetailsRow-cell ms-DetailsHeader-cell" style="flex: @column.Flex;" data-sort="@column.InternalName">
                        @column.DisplayName
                        <span class="sort-icon"></span>
                        @if (column != displayColumns.Last())
                        {
                            <div class="col-resizer" data-col="@displayIndex"><div class="col-resizer-inner"></div></div>
                        }
                    </div>
                    displayIndex++;
                }
            </div>
            <!-- Search Row -->
            <div class="search-row">
                @foreach (var column in displayColumns)
                {
                    <div class="search-cell" style="flex: @column.Flex;">
                        <input type="text" class="search-input" data-field="@column.InternalName" placeholder="Search @column.DisplayName..."
                               value="@(searchColumnName != null && searchColumnName == column.InternalName ? searchTerm : string.Empty)" />
                        <button class="search-button" type="button">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>
                }
            </div>
        </div>
        <div class="ms-DetailsList-contentWrapper">
            <!-- Grid contents will be loaded dynamically via JavaScript -->
        </div>
    </div>
</div>

<input type="hidden" id="currentSort" value="@sortColumnName" />
<input type="hidden" id="currentDirection" value="@sortDirection" />
<input type="hidden" id="searchTerm" value="@searchTerm" />
<input type="hidden" id="currentPage" value="@currentPage" />
<input type="hidden" id="tableName" value="@tableName" />
<input type="hidden" id="searchColumn" value="" />

<div class="pagination-container d-flex justify-content-center mb-3"></div>
<script>
    (function() {
      // Grid initialization and event wiring
      // Get a reference to the displayColumns for JavaScript
      const displayColumnFields = @(Html.Raw(JsonSerializer.Serialize(displayColumns.Select(c => c.InternalName))));

      // Grid container reference
      const gridContainer = document.getElementById(`grid-@Model.GetHashCode()`);

      // Initialize variables
      let currentSort = document.getElementById('currentSort').value;
      let currentDirection = document.getElementById('currentDirection').value;
      let searchTerm = document.getElementById('searchTerm').value;
      let currentSearchColumn = document.getElementById('searchColumn').value;
      let currentPage = document.getElementById('currentPage').value;
      const tableName = document.getElementById('tableName').value;

      // Add click event handler for grid rows to navigate to display page
      function addRowClickHandlers() {
          document.querySelectorAll('.ms-DetailsRow').forEach(row => {
              // Don't add click handler to header row or search row
              if (row.closest('.ms-DetailsHeader')) {
                  return;
              }

              // Get the row's data-id and data-table attributes
              const id = row.getAttribute('data-id');
              const table = row.getAttribute('data-table');

              // Only add click handler if we have both id and table
              if (id && table) {
                  row.addEventListener('click', function(e) {
                      // Don't navigate if we clicked on a link or button within the row
                      if (e.target.tagName === 'A' || e.target.tagName === 'BUTTON' ||
                          e.target.closest('a') || e.target.closest('button')) {
                          return;
                      }

                      // Navigate to display page
                      window.location.href = `/Display/${table}/${id}`;
                  });
              }
          });
      }

      // Add click handlers for initial rows
      addRowClickHandlers();

      // Current column searches
      let currentSearches = {};

      // Get all search inputs and initialize currentSearches
      document.querySelectorAll('.search-input').forEach(input => {
          const field = input.getAttribute('data-field');
          const value = input.value.trim();
          if (value) {
              currentSearches[field] = value;
          }

          // Add event listener for search input
          input.addEventListener('keyup', function(e) {
              if (e.key === 'Enter') {
                  applySearches();
              }
          });
      });

      // Column Sorting - Initialize sort icons
      if (currentSort) {
          const activeHeader = document.querySelector(`[data-sort="${currentSort}"]`);
          if (activeHeader) {
              const sortIcon = activeHeader.querySelector('.sort-icon');
              sortIcon.innerHTML = currentDirection === 'desc' ? '▼' : '▲';
          }
      }

      // AJAX Pagination
      document.querySelectorAll('.pagination .page-link').forEach(link => {
          if (!link.hasAttribute('data-page')) return;

          link.addEventListener('click', function(e) {
              e.preventDefault();
              const page = this.getAttribute('data-page');
              loadGridData(page);
          });
      });

      // Grid key for localStorage
      const gridKey = `grid-@Model.GetHashCode()`;

      // Load stored column widths
      let columnWidths = JSON.parse(localStorage.getItem(`${gridKey}-columnWidths`)) || [];
      console.log("Loaded stored columnWidths:", columnWidths);

      // Removed simulated resize logic to prevent JS errors and let grid render normally

      // Apply searches function
      function applySearches() {
          // Reset searches
          currentSearches = {};

          // Reset main search term
          searchTerm = '';
          currentSearchColumn = '';

          // Get all search values
          document.querySelectorAll('.search-input').forEach(input => {
              const field = input.getAttribute('data-field');
              const value = input.value.trim();
              if (value) {
                  currentSearches[field] = value;
                  // Update the main search term and column to the first non-empty field
                  if (searchTerm === '') {
                      searchTerm = value;
                      currentSearchColumn = field;
                  }
              }
          });

          // Store the search column for the next request
          document.getElementById('searchColumn').value = currentSearchColumn;
          console.log('Applying search with term:', searchTerm);

          // Reset to page 1 when applying searches
          loadGridData(1);
      }

      // Add search button event listener (if you want to add search buttons later)
      document.querySelectorAll('.search-button').forEach(button => {
          button.addEventListener('click', function() {
              applySearches();
          });
      });

      function loadGridData(page) {
          // Show loading indicator
          const gridElement = document.getElementById(`grid-@Model.GetHashCode()`);
          if (gridElement) {
              gridElement.classList.add('loading');

              // Build the URL with all parameters
              const url = `/GetGridData/${tableName}?page=${page}&searchColumn=${encodeURIComponent(currentSearchColumn)}&searchTerm=${encodeURIComponent(searchTerm)}&sortColumnName=${currentSort}&sortDirection=${currentDirection}`;

              console.log('Fetching data from URL:', url);
              console.log('Current sort field:', currentSort);
              console.log('Current sort direction:', currentDirection);

              // Fetch the data
              fetch(url)
                  .then(response => response.json())
                  .then(data => {
                        console.log('Received grid data response:', data);
                        // Unwrap API response if it's wrapped
                        const gridData = data.data || data;

                        // Verify data structure before updating
                        if (gridData.items && Array.isArray(gridData.items)) {
                            console.log('Items count:', gridData.items.length);
                            if (gridData.items.length > 0) {
                                console.log('First item structure:', gridData.items[0]);
                                console.log('Column structures:', gridData.columns);
                            }
                        } else {
                            console.error('No items array in response or empty items');
                        }

                        updateGrid(gridData);
                        gridElement.classList.remove('loading');
                  })
                  .catch(error => {
                      console.error('Error fetching grid data:', error);
                      gridElement.classList.remove('loading');
                  });
          }
      }

      function updateGrid(data) {
          // Update grid content
          const contentWrapper = document.querySelector(`#grid-@Model.GetHashCode() .ms-DetailsList-contentWrapper`);
          if (contentWrapper) {
              // Clear existing content
              contentWrapper.innerHTML = '';

              if (data.items && data.items.length > 0) {
                  // Filter the returned columns to match our display columns
                  console.log('Display column fields:', displayColumnFields);

                  // Find all possible column field name variations
                  const displayColumns = [];

                  if (data.columns && Array.isArray(data.columns)) {
                      // Try to match columns by field, internalName, or name
                      displayColumnFields.forEach(fieldName => {
                          // Look for exact match first
                          let match = data.columns.find(col =>
                              col.field === fieldName ||
                              col.internalName === fieldName ||
                              col.Field === fieldName ||
                              col.InternalName === fieldName
                          );

                          if (match) {
                              displayColumns.push(match);
                          } else {
                              // If no match found, create a default column
                              displayColumns.push({
                                  field: fieldName,
                                  internalName: fieldName,
                                  flex: "1",
                                  displayName: fieldName
                              });
                          }
                      });
                  } else {
                      console.error('No columns data in response');
                  }

                  console.log('Mapped display columns:', displayColumns);

                  // Add new rows
                  data.items.forEach(item => {
                      const rowElement = document.createElement('div');
                      rowElement.className = 'ms-DetailsRow';

                      // Add data attributes for the row ID and table name
                      const rowId = item.rowId || item.RowId || item.id || item.Id;
                      if (rowId) {
                          rowElement.setAttribute('data-id', rowId);
                          rowElement.setAttribute('data-table', data.tableName);
                      }

                      // Use filtered columns to maintain order
                      displayColumns.forEach(column => {
                          const cellElement = document.createElement('div');
                          cellElement.className = 'ms-DetailsRow-cell';

                          // Get column identifiers
                          const columnName = column.field || column.internalName || column.Field || column.InternalName;

                          console.log('Accessing column:', columnName);

                          // Retrieve the cell value from the JSON dictionary
                          let cellValue = '';
                          if (item.valuesByColumnNames && item.valuesByColumnNames[columnName] !== undefined) {
                              cellValue = item.valuesByColumnNames[columnName];
                          }
                          // Render the cell
                          cellElement.style.flex = column.flex;
                          cellElement.innerHTML = cellValue;

                          rowElement.appendChild(cellElement);
                      });

                      contentWrapper.appendChild(rowElement);
                  });

                  // Add click handlers to the new rows
                  addRowClickHandlers();
              } else {
                  // Show "no items" message
                  const emptyRow = document.createElement('div');
                  emptyRow.className = 'ms-DetailsRow';

                  const emptyCell = document.createElement('div');
                  emptyCell.className = 'ms-DetailsRow-cell';
                  emptyCell.style.width = '100%';
                  emptyCell.style.textAlign = 'center';
                  emptyCell.textContent = 'No items found';

                  emptyRow.appendChild(emptyCell);
                  contentWrapper.appendChild(emptyRow);
              }
          }

          // Update current page indicator
          document.getElementById('currentPage').value = data.currentPage;
          currentPage = data.currentPage;

          // Update pagination
          updatePagination(data);

          // Reapply column resizing
          applyStoredColumnWidths();
      }

      function updatePagination(data) {
          const paginationContainer = document.querySelector('.pagination-container');
          if (!paginationContainer) return;

          // Create new pagination element
          const nav = document.createElement('nav');
          nav.setAttribute('aria-label', 'Page navigation');

          const ul = document.createElement('ul');
          ul.className = 'pagination';

          // First and Previous buttons
          if (data.currentPage > 1) {
              ul.appendChild(createPageItem('First', 1));
              ul.appendChild(createPageItem('Previous', data.currentPage - 1));
          } else {
              ul.appendChild(createDisabledPageItem('First'));
              ul.appendChild(createDisabledPageItem('Previous'));
          }

          // Page numbers
          let startPage = Math.max(1, data.currentPage - 2);
          let endPage = Math.min(data.totalPages, startPage + 4);
          if (endPage - startPage < 4 && startPage > 1) {
              startPage = Math.max(1, endPage - 4);
          }

          for (let i = startPage; i <= endPage; i++) {
              if (i === data.currentPage) {
                  ul.appendChild(createActivePageItem(i));
              } else {
                  ul.appendChild(createPageItem(i, i));
              }
          }

          // Next and Last buttons
          if (data.currentPage < data.totalPages) {
              ul.appendChild(createPageItem('Next', data.currentPage + 1));
              ul.appendChild(createPageItem('Last', data.totalPages));
          } else {
              ul.appendChild(createDisabledPageItem('Next'));
              ul.appendChild(createDisabledPageItem('Last'));
          }

          nav.appendChild(ul);

          // Replace existing pagination
          paginationContainer.innerHTML = '';
          paginationContainer.appendChild(nav);

          // Add event listeners to new pagination links
          paginationContainer.querySelectorAll('.page-link').forEach(link => {
              if (!link.hasAttribute('data-page')) return;

              link.addEventListener('click', function(e) {
                  e.preventDefault();
                  const page = this.getAttribute('data-page');
                  loadGridData(page);
              });
          });
      }

      function createPageItem(text, page) {
          const li = document.createElement('li');
          li.className = 'page-item';

          const a = document.createElement('a');
          a.className = 'page-link';
          a.href = '#';
          a.setAttribute('data-page', page);
          a.textContent = text;

          li.appendChild(a);
          return li;
      }

      function createActivePageItem(page) {
          const li = document.createElement('li');
          li.className = 'page-item active';

          const a = document.createElement('a');
          a.className = 'page-link';
          a.href = '#';
          a.setAttribute('data-page', page);
          a.textContent = page;

          li.appendChild(a);
          return li;
      }

      function createDisabledPageItem(text) {
          const li = document.createElement('li');
          li.className = 'page-item disabled';

          const span = document.createElement('span');
          span.className = 'page-link';
          span.textContent = text;

          li.appendChild(span);
          return li;
      }

      // Column Sorting - Event Handlers
      const headerCells = document.querySelectorAll('.ms-DetailsHeader-cell');
      headerCells.forEach(cell => {
          cell.addEventListener('click', function(e) {
              if (e.target.classList.contains('col-resizer')) return;

              const sortColumnName = this.getAttribute('data-sort');
              if (!sortColumnName) return; // Skip columns without sort attribute

              let sortDirection = 'asc';

              // Toggle sort direction if already sorting by this field
              if (sortColumnName === currentSort) {
                  sortDirection = currentDirection === 'asc' ? 'desc' : 'asc';
              } else {
                  // Reset direction to ascending if changing sort column
                  sortDirection = 'asc';
              }

              // Update current sort state variables
              currentSort = sortColumnName;
              currentDirection = sortDirection;

              // Update sort icons
              updateSortIcons(sortColumnName, sortDirection);

              // Reload grid data using AJAX
              loadGridData(currentPage);
          });
      });

      // Function to update sort icons
      function updateSortIcons(sortColumnName, sortDirection) {
          // Clear existing icons
          document.querySelectorAll('.ms-DetailsHeader-cell .sort-icon').forEach(icon => {
              icon.innerHTML = '';
          });

          // Set icon for the active column
          const activeHeader = document.querySelector(`[data-sort="${sortColumnName}"]`);
          if (activeHeader) {
              const sortIcon = activeHeader.querySelector('.sort-icon');
              if (sortIcon) {
                  sortIcon.innerHTML = sortDirection === 'desc' ? '▼' : '▲';
              }
          }

          // Update hidden fields if necessary
          document.getElementById('currentSort').value = sortColumnName;
          document.getElementById('currentDirection').value = sortDirection;
      }

      // Apply stored column widths if available
      // Return true if successful, false if not
      function applyStoredColumnWidths() {
          console.log("Attempting to apply stored column widths:", columnWidths);

          // If the array is empty or doesn't represent stored widths, exit.
          if (!Array.isArray(columnWidths) || columnWidths.length === 0) {
              console.log("No stored column widths to apply or array is empty.");
              return false;
          }

          const headerCells = document.querySelectorAll('.ms-DetailsHeader-cell');
          const searchRowElement = document.querySelector('.search-row');
          const contentWrapper = document.querySelector('.ms-DetailsList-contentWrapper');

          // Check if necessary elements exist
          if (!headerCells.length || !searchRowElement || !contentWrapper) {
              console.log("Required DOM elements not found yet");
              return false;
          }

          // Get search cells
          const searchCells = searchRowElement.querySelectorAll('.search-cell');
          if (!searchCells.length) {
              console.log("Search cells not found");
              return false;
          }

          // Get data rows
          const dataRows = contentWrapper.querySelectorAll('.ms-DetailsRow');

          // Start applying widths
          let successCount = 0;

          // Forcibly apply widths to all element types at once
          headerCells.forEach((headerCell, displayIndex) => {
              // Only apply if a width exists for this specific index
              const width = columnWidths[displayIndex];
              if (!width) {
                  // If no specific width stored, ensure default flex is applied or leave as is
                  // Optional: Reset to default flex if needed, but likely handled by initial render
                  // headerCell.style.flex = initialFlexValue; // Need a way to get initial flex if resetting
                  console.log(`No stored width for column ${displayIndex}, using default flex.`);
                  return; // Skip applying fixed width
              }

              // Ensure width is a number before applying
              if (typeof width !== 'number' || width <= 0) {
                  console.log(`Invalid stored width for column ${displayIndex}: ${width}`);
                  return; // Skip invalid width
              }

              console.log(`Setting stored width for column ${displayIndex} to ${width}px`);

              // Set all at once
              try {
                  const styleFlexFixed = `0 0 ${width}px`;
                  const styleFlexAuto = '1 1 auto'; // A standard flexible value

                  // 1. Header cell
                  headerCell.style.flex = styleFlexAuto; // Reset
                  void headerCell.offsetWidth;          // Reflow
                  headerCell.style.flex = styleFlexFixed; // Apply fixed
                  void headerCell.offsetWidth;           // Reflow

                  // 2. Search cell
                  if (displayIndex < searchCells.length) {
                      const searchCell = searchCells[displayIndex];
                      if (searchCell) {
                          searchCell.style.flex = styleFlexAuto; // Reset
                          void searchCell.offsetWidth;          // Reflow
                          searchCell.style.flex = styleFlexFixed; // Apply fixed
                          void searchCell.offsetWidth;           // Reflow
                      }
                  }

                  // 3. All data cells in this column
                  dataRows.forEach(row => {
                      const cells = row.querySelectorAll('.ms-DetailsRow-cell');
                      if (cells && displayIndex < cells.length) {
                          const cell = cells[displayIndex];
                          if (cell) {
                              cell.style.flex = styleFlexAuto; // Reset (no reflow needed in loop typically)
                              cell.style.flex = styleFlexFixed; // Apply fixed
                          }
                      }
                  });

                  successCount++;
              } catch (e) {
                  console.error(`Error setting width for column ${displayIndex}:`, e);
              }
          });

          console.log(`Successfully applied widths to ${successCount} of ${headerCells.length} columns`);
          return successCount > 0;
      }

      // Column Resizing
      const resizers = document.querySelectorAll('.col-resizer');
      let isResizing = false;
      let currentResizer = null;
      let startX, startWidth;

      resizers.forEach((resizer, index) => {
          // Prevent event propagation on resizer
          resizer.addEventListener('click', function(e) {
              e.stopPropagation();
          });

          resizer.addEventListener('mousedown', function(e) {
              isResizing = true;
              currentResizer = this;
              startX = e.pageX;

              // Get the header cell
              const headerCell = this.parentElement;

              // Get the current width from the style attribute
              const styleValue = headerCell.getAttribute('style');
              const flexMatch = styleValue?.match(/flex:[^;]*0\s+0\s+(\d+)px/);
              startWidth = flexMatch ? parseInt(flexMatch[1]) : headerCell.offsetWidth;

              document.addEventListener('mousemove', handleMouseMove);
              document.addEventListener('mouseup', stopResize);

              this.classList.add('active');
              e.preventDefault();
              e.stopPropagation(); // Stop propagation to prevent header click
          });
      });

      function handleMouseMove(e) {
          if (!isResizing) return;

          const headerCell = currentResizer.parentElement;
          const columnIndex = currentResizer.getAttribute('data-col');
          const width = startWidth + (e.pageX - startX);

          if (width > 50) {  // Minimum width
              // Update header cell width
              const styleValue = headerCell.getAttribute('style');
              const newStyle = styleValue ? styleValue.replace(/flex:[^;]+;/, `flex: 0 0 ${width}px;`) : `flex: 0 0 ${width}px;`;
              headerCell.setAttribute('style', newStyle);

              // Update search cell width
              const searchCell = document.querySelector(`.search-cell:nth-child(${parseInt(columnIndex) + 1})`);
              if (searchCell) {
                  const searchStyle = searchCell.getAttribute('style');
                  const newSearchStyle = searchStyle ? searchStyle.replace(/flex:[^;]+;/, `flex: 0 0 ${width}px;`) : `flex: 0 0 ${width}px;`;
                  searchCell.setAttribute('style', newSearchStyle);
              }

              // Update all cells in this column
              document.querySelectorAll(`.ms-DetailsRow-cell:nth-child(${parseInt(columnIndex) + 1})`).forEach(rowCell => {
                  const rowStyle = rowCell.getAttribute('style');
                  const newRowStyle = rowStyle ? rowStyle.replace(/flex:[^;]+;/, `flex: 0 0 ${width}px;`) : `flex: 0 0 ${width}px;`;
                  rowCell.setAttribute('style', newRowStyle);
              });
          }
      }

      function stopResize(e) {
          isResizing = false;
          currentResizer.classList.remove('active');
          document.removeEventListener('mousemove', handleMouseMove);
          document.removeEventListener('mouseup', stopResize);

          // Save the final width to columnWidths array
          const headerCell = currentResizer.parentElement;
          const columnIndex = parseInt(currentResizer.getAttribute('data-col'));

          // Get the current width from the style attribute
          const styleValue = headerCell.getAttribute('style');
          const flexMatch = styleValue?.match(/flex:[^;]*0\s+0\s+(\d+)px/);
          const finalWidth = flexMatch ? parseInt(flexMatch[1]) : headerCell.offsetWidth;

          // Update columnWidths array
          columnWidths[columnIndex] = finalWidth;

          // Save to localStorage
          localStorage.setItem(`${gridKey}-columnWidths`, JSON.stringify(columnWidths));

          // Re-apply all stored widths to ensure consistency after resize
          applyStoredColumnWidths();
      }

      // Initial data load
      loadGridData(currentPage);
      // Ensure container is marked ready to become visible
      if (gridContainer) {
          gridContainer.classList.add('ready');
      }
    })();
</script>
